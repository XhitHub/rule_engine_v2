const gRuleSubRes1 = {
  argSubMap: {

  },
  instance: {
    lhs: [],
    rhs: []
  }
}

// return bool of [can match the gFact or not]? 
  // modify argSubMap in-place
  tryMatchFacts(gFact, availFacts, argSubMap) {

  }

  obtainAllForwardFirableInstances(gRule, availFacts) {
    gRule.searchForm.lhs.forEach(gFact => {

    })
  }

  
        if (argSubMap2[k] == undefined) {
          // this arg is not subbed yet
        } else {
          if (argSubMap2[k] != fact[k]) {
            // hv argSubMap entry and it doesnt match
            canMatch = false;
          }
        }


argConstraints: args => (
      (!mu.allDefined(args, ['$time', '$time2']) || args['$time'] == args['$time2'] + 1)
      &&
      (!mu.allDefined(args, ['$time', '$time3']) || args['$time'] == args['$time3'] - 1)
      // need to handle arg not yet subbed case by !mu.allDefined
    ),


  // return list of new facts
  forward(rule, availFacts) {
    let canFire = true;
    rule.lhs.forEach(fact => {
      if (!this.isFactTrue(fact, availFacts)) {
        // at least 1 fact in xhs is false, cannot fire
        canFire = false;
      }
    })
    if (canFire) {
      // potentially have redundant facts in availFacts. can have [clear redundant fact] regularly to resolve the issue?
      return rule.rhs
    } else {
      return []
    }
    // return canFire
  }


  // modify availFacts in-place
  forward(rule, availFacts) {
    let canFire = true;
    rule.lhs.forEach(fact => {
      if (!this.isFactTrue(fact, availFacts)) {
        // at least 1 fact in xhs is false, cannot fire
        canFire = false;
      }
    })
    if (canFire) {
      // potentially have redundant facts in availFacts. can have [clear redundant fact] regularly to resolve the issue?
      rule.rhs.forEach(rFact => {
        availFacts.push(rFact)
      })
    }
    // return canFire
  }

  const concatNoRepeat = (arr1, arr2) => {
  let arr3 = arr1.concat(arr2)
  let set = new Set(arr3)
  let arr4 = Array.from(set)
  return arr4
}


      argChecksV1: [
        {
          args: ["t1","t2"],
          func: args => args["t2"] >= args["t1"],
        }
      ],